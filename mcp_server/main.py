# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:25:26+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Path

from models import (
    ConfigCOAP,
    ConfigDHCP,
    ConfigIPMI,
    ConfigMQTT,
    ConfigNETFLOW,
    ConfigPROXY,
    ConfigSFLOW,
    ConfigSNMPTCP,
    ConfigSNMPv3,
    ConfigSSH,
    ConfigSYSLOG,
    ConfigTELNET,
    ConfigTFTP,
    ConfigTOD,
    ConfigWEB,
    InfoArray,
    MimicAccessListGetResponse,
    MimicAccessLoadFilenamePutResponse,
    MimicAccessSaveFilenamePutResponse,
    MimicAgentAgentNumAddIPPostRequest,
    MimicAgentAgentNumFromListGetResponse,
    MimicAgentAgentNumGetMibsGetResponse,
    MimicAgentAgentNumGetProtocolGetResponse,
    MimicAgentAgentNumGetStatisticsGetResponse,
    MimicAgentAgentNumIpaliasListGetResponse,
    MimicAgentAgentNumProtocolMsgCoapGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgCoapGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgDhcpGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgDhcpGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgDhcpParamsGetResponse,
    MimicAgentAgentNumProtocolMsgIpmiGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgIpmiGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgMqttClientGetProtstateGetResponse,
    MimicAgentAgentNumProtocolMsgMqttClientGetStateGetResponse,
    MimicAgentAgentNumProtocolMsgMqttClientMessageCardGetResponse,
    MimicAgentAgentNumProtocolMsgMqttClientMessageGetMsgNumAttrGetResponse,
    MimicAgentAgentNumProtocolMsgMqttClientMessageSetMsgNumAttrValuePutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientRuntimeAbortPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientRuntimeConnectPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientRuntimeDisconnectPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSetBrokerBrokerAddrPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSetCleansessionCleanOrNotPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSetClientidClientIDPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSetKeepaliveAliveTimePutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSetOnDisconnectActionPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSetPasswordPasswordPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSetPortPortPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSetUsernameUsernamePutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSetWillmsgMsgPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSetWillqosQosPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSetWillretainRetainPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSetWilltopicTopicPutResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSubscribeCardGetResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSubscribeGetSubNumAttrGetResponse,
    MimicAgentAgentNumProtocolMsgMqttClientSubscribeSetSubNumAttrValuePutResponse,
    MimicAgentAgentNumProtocolMsgMqttGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgMqttGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgNetflowFlowListGetResponse,
    MimicAgentAgentNumProtocolMsgNetflowGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgNetflowGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgProxyGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgProxyGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgProxyPortListGetResponse,
    MimicAgentAgentNumProtocolMsgSflowGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgSflowGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgSnmptcpGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgSnmptcpGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgSnmptcpIpaliasListGetResponse,
    MimicAgentAgentNumProtocolMsgSnmpv3AccessListGetResponse,
    MimicAgentAgentNumProtocolMsgSnmpv3GroupListGetResponse,
    MimicAgentAgentNumProtocolMsgSnmpv3UserListGetResponse,
    MimicAgentAgentNumProtocolMsgSnmpv3UsmSaveasFilenamePutResponse,
    MimicAgentAgentNumProtocolMsgSnmpv3UsmSavePutResponse,
    MimicAgentAgentNumProtocolMsgSnmpv3VacmSaveasFilenamePutResponse,
    MimicAgentAgentNumProtocolMsgSnmpv3VacmSavePutResponse,
    MimicAgentAgentNumProtocolMsgSnmpv3ViewListGetResponse,
    MimicAgentAgentNumProtocolMsgSshGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgSshGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgSshIpaliasListGetResponse,
    MimicAgentAgentNumProtocolMsgSyslogGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgSyslogGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgTelnetConnectionLogonConnectionIDUserPasswordPutResponse,
    MimicAgentAgentNumProtocolMsgTelnetConnectionRequestConnectionIDCommandPutResponse,
    MimicAgentAgentNumProtocolMsgTelnetConnectionSignalConnectionIDSignalNamePutResponse,
    MimicAgentAgentNumProtocolMsgTelnetGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgTelnetGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgTelnetIpaliasListGetResponse,
    MimicAgentAgentNumProtocolMsgTelnetServerGetConnectionsGetResponse,
    MimicAgentAgentNumProtocolMsgTelnetServerGetKeymapGetResponse,
    MimicAgentAgentNumProtocolMsgTelnetServerGetRulesdbGetResponse,
    MimicAgentAgentNumProtocolMsgTelnetServerGetStateGetResponse,
    MimicAgentAgentNumProtocolMsgTelnetServerGetUserdbGetResponse,
    MimicAgentAgentNumProtocolMsgTelnetServerGetUsersGetResponse,
    MimicAgentAgentNumProtocolMsgTftpGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgTftpGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgTftpSessionReadServerSrcfilePostResponse,
    MimicAgentAgentNumProtocolMsgTftpSessionWriteServerSrcfilePostResponse,
    MimicAgentAgentNumProtocolMsgTodGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgTodGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgTodGettimeServerServerAddrPortPortNumScriptScriptNameTimeoutTimeSecRetriesNumRetriesGetResponse,
    MimicAgentAgentNumProtocolMsgWebGetArgsGetResponse,
    MimicAgentAgentNumProtocolMsgWebGetStatisticsGetResponse,
    MimicAgentAgentNumProtocolMsgWebPortExistsPortGetResponse,
    MimicAgentAgentNumProtocolProtGetConfigGetResponse,
    MimicAgentAgentNumSetMibsPutRequest,
    MimicAgentAgentNumSetProtocolPutRequest,
    MimicAgentAgentNumSetProtocolPutResponse,
    MimicAgentAgentNumStoreListGetResponse,
    MimicAgentAgentNumTimerScriptListGetResponse,
    MimicAgentAgentNumTrapConfigListGetResponse,
    MimicAgentAgentNumTrapListGetResponse,
    MimicAgentAgentNumValueInstancesObjectGetResponse,
    MimicAgentAgentNumValueListOIDGetResponse,
    MimicAgentAgentNumValueMevalObjInsArrayGetResponse,
    MimicAgentAgentNumValueMgetObjInsVarArrayGetResponse,
    MimicAgentAgentNumValueMsetPutRequest,
    MimicAgentAgentNumValueMunsetPutRequest,
    MimicAgentAgentNumValueSplitOIDGetResponse,
    MimicAgentAgentNumValueVariablesObjectInstanceGetResponse,
    MimicClearFirstAgentNumLastAgentNumPutResponse,
    MimicGetActiveDataListGetResponse,
    MimicGetActiveListGetResponse,
    MimicGetCfgfileChangedGetResponse,
    MimicGetCfgfileGetResponse,
    MimicGetChangedConfigListGetResponse,
    MimicGetChangedStateListGetResponse,
    MimicGetClientsGetResponse,
    MimicGetConfiguredListGetResponse,
    MimicGetInterfacesGetResponse,
    MimicGetLogGetResponse,
    MimicGetNetaddrGetResponse,
    MimicGetNetdevGetResponse,
    MimicGetProductGetResponse,
    MimicGetProtocolsGetResponse,
    MimicGetReturnGetResponse,
    MimicLoadCfgFileFirstAgentNumLastAgentNumStartAgentNumPutResponse,
    MimicMgetInfoArrayGetResponse,
    MimicProtocolMsgCoapGetStatsHdrGetResponse,
    MimicProtocolMsgDhcpGetStatsHdrGetResponse,
    MimicProtocolMsgIpmiGetStatsHdrGetResponse,
    MimicProtocolMsgMqttGetStatsHdrGetResponse,
    MimicProtocolMsgNetflowGetStatsHdrGetResponse,
    MimicProtocolMsgProxyGetStatsHdrGetResponse,
    MimicProtocolMsgSflowGetStatsHdrGetResponse,
    MimicProtocolMsgSnmptcpGetStatsHdrGetResponse,
    MimicProtocolMsgSshGetStatsHdrGetResponse,
    MimicProtocolMsgSyslogGetStatsHdrGetResponse,
    MimicProtocolMsgTelnetGetStatsHdrGetResponse,
    MimicProtocolMsgTftpGetStatsHdrGetResponse,
    MimicProtocolMsgTodGetStatsHdrGetResponse,
    MimicProtocolMsgWebGetStatsHdrGetResponse,
    MimicSaveasCfgFileFirstAgentNumLastAgentNumPutResponse,
    MimicSavePutResponse,
    MimicSetNetdevPutResponse,
    MimicSetPersistentPutResponse,
    MimicStartPutResponse,
    MimicStopPutResponse,
    MimicStoreListGetResponse,
    MimicTerminatePutResponse,
    MimicTimerScriptListGetResponse,
    ObjInsArray,
    ObjInsVarArray,
    SyslogMsg,
)

app = MCPProxy(
    contact={'email': 'support@gambitcomm.com'},
    description='This is the API for MIMIC client to connect to MIMIC daemon.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://www.gambitcomm.com/terms/',
    title='MIMIC REST API',
    version='21.00',
    servers=[
        {'url': 'http://gambitcomm.local'},
        {
            'description': 'Gambit Communications MIMIC simulator REST API',
            'url': 'http://127.0.0.1',
        },
    ],
)


@app.post(
    '/mimic/access/add/{user}/{agents}/{mask}',
    description=""" Adds/Overwrites the user entry in the access control database. """,
    tags=['access_control_management', 'snmpv3_access_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def access_add(user: str, agents: str = ..., mask: str = ...):
    """
    Adds/Overwrites the user entry in the access control database.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/access/del/{user}',
    description=""" Using '*' for user clears all the users. """,
    tags=['access_control_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def access_del(user: str):
    """
    Clears a users entry from access control database.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/access/get/acldb',
    description=""" If nothing is specified then this returns "". """,
    tags=['access_control_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def access_get_acldb():
    """
    Returns the current access control database in use.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/access/get/admindir',
    description=""" If nothing is specified in admin/settings.cfg then returns "". If no admin directory is specified then the shared area will be used where needed (e.g. for persistent info, access control data files etc. ) """,
    tags=['access_control_management', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def access_get_admindir():
    """
    Returns the current admin directory.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/access/get/adminuser',
    description=""" If nothing is specified in admin/settings.cfg then returns "". """,
    tags=['access_control_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def access_get_adminuser():
    """
    Returns the current administrator.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/access/get/enabled',
    description=""" 0 indicates that it is disabled, 1 indicates it is enabled. """,
    tags=['access_control_management', 'snmpv3_access_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def access_get_enabled():
    """
    Returns the state of access control checking.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/access/list',
    description=""" Each entry consists of user, agents (in minimal range representation) and access mask (not used currently). """,
    tags=['agent_operations', 'agent_status_queries', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def access_list():
    """
    Returns an array of entries.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/access/load/{filename}',
    description=""" If filename is not specified then the currently set 'acldb' parameter is used. """,
    tags=['access_control_management', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def access_load(filename: str):
    """
    Loads the specified file for access control data.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/access/save/{filename}',
    description=""" If filename is not specified then the currently set 'acldb' parameter is used. """,
    tags=['access_control_management', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def access_save(filename: str):
    """
    Saves current access control data in specified file.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/access/set/acldb/{databaseName}',
    description=""" This will be used for subsequent load and save operations. """,
    tags=['access_control_management', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def access_set_acldb(database_name: str = Path(..., alias='databaseName')):
    """
    Allows setting the name of the current access control database.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/access/set/enabled/{enabledOrNot}',
    description=""" 0 indicates disabled, 1 indicates enabled. """,
    tags=['access_control_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def access_set_enabled(enabled_or_not: str = Path(..., alias='enabledOrNot')):
    """
    Allows the user to enable/disable the access control check.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/add/{IP}',
    description=""" Add an agent. """,
    tags=['agent_management', 'ipalias_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def new(
    agent_num: int = Path(..., alias='agentNum'),
    i_p: str = Path(..., alias='IP'),
    body: MimicAgentAgentNumAddIPPostRequest = ...,
):
    """
    Add an agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/from/add/{IP}/{port}',
    description=""" An empty ipaddress or 0.0.0.0 both imply any address. Similarly an empty port or 0 both imply any port. For agents with source-address-indexing enabled, messages which do not match any source address will be discarded with an ERROR message, similar to community string mismatches. """,
    tags=['agent_management', 'ipalias_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def from_add(
    agent_num: int = Path(..., alias='agentNum'),
    i_p: str = Path(..., alias='IP'),
    port: int = ...,
):
    """
    Add a source address that the agent will accept messages from.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/from/delete/{IP}/{port}',
    description=""" An empty ipaddress or 0.0.0.0 both imply any address. Similarly an empty port or 0 both imply any port. For agents with source-address-indexing enabled, messages which do not match any source address will be discarded with an ERROR message, similar to community string mismatches. """,
    tags=['agent_management', 'ipalias_management', 'snmpv3_access_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def from_del(
    agent_num: int = Path(..., alias='agentNum'),
    i_p: str = Path(..., alias='IP'),
    port: int = ...,
):
    """
    delete a source address that the agent will accept messages from.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/from/list',
    description=""" This in effect implements source-address-indexing, where 2 agents with the same address can be configured, each accepting messages from different management stations. """,
    tags=['agent_management', 'agent_configuration_queries', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def from_list(agent_num: int = Path(..., alias='agentNum')):
    """
    List the source addresses that the agent will accept messages from.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/changed',
    description=""" has the agent value space changed? """,
    tags=['agent_configuration_queries', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_changed(agent_num: int = Path(..., alias='agentNum')):
    """
    has the agent value space changed?
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/config_changed',
    description=""" has the lab configuration changed? """,
    tags=['agent_configuration_queries', 'lab_configuration_handling'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_config_changed(agent_num: int = Path(..., alias='agentNum')):
    """
    has the lab configuration changed?
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/delay',
    description=""" The minimum granularity is 10 msec. """,
    tags=[
        'agent_management',
        'agent_operations',
        'agent_control',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_delay(agent_num: int = Path(..., alias='agentNum')):
    """
    one-way transit delay in msec.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/drops',
    description=""" drop rate (every N-th PDU). 0 means no drops. """,
    tags=['agent_management', 'agent_operations', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_drops(agent_num: int = Path(..., alias='agentNum')):
    """
    drop rate (every N-th PDU). 0 means no drops.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/host',
    description=""" Currently, only IPv4 addresses are allowed as the main address of the agent, but both IPv4 and IPv6 addresses are allowed as IP aliases for the agent. """,
    tags=[
        'agent_management',
        'agent_configuration_queries',
        'agent_operations',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_host(agent_num: int = Path(..., alias='agentNum')):
    """
    host address of the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/inform_timeout',
    description=""" The agent will retransmit INFORM PDUs at this interval until it has received a reply from the manager. """,
    tags=['agent_management', 'agent_operations', 'agent_control', 'timer_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_inform_timeout(agent_num: int = Path(..., alias='agentNum')):
    """
    timeout in seconds for retransmitting INFORM PDUs.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/interface',
    description=""" network interface card for the agent. """,
    tags=['agent_management', 'agent_control', 'network_interface_info'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_interface(agent_num: int = Path(..., alias='agentNum')):
    """
    network interface card for the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/mask',
    description=""" subnet mask of the agent. """,
    tags=['agent_configuration_queries', 'agent_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_mask(agent_num: int = Path(..., alias='agentNum')):
    """
    subnet mask of the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/mibs',
    description=""" set of MIBs, simulations and scenarios """,
    tags=[
        'agent_management',
        'mib_object_management',
        'agent_operations',
        'lab_configuration_handling',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_mibs(agent_num: int = Path(..., alias='agentNum')):
    """
    set of MIBs, simulations and scenarios
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/num_starts',
    description=""" This count is incremented each time an agent starts. It affects the SNMPv3 EngineBoots parameter. """,
    tags=['agent_management', 'agent_control', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_number_starts(agent_num: int = Path(..., alias='agentNum')):
    """
    number of starts for the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/oiddir',
    description=""" MIB directory of the agent. """,
    tags=[
        'mib_object_management',
        'agent_configuration_queries',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_oiddir(agent_num: int = Path(..., alias='agentNum')):
    """
    MIB directory of the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/owner',
    description=""" owner of the agent. """,
    tags=[
        'agent_management',
        'agent_control',
        'agent_configuration',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_owner(agent_num: int = Path(..., alias='agentNum')):
    """
    owner of the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/pdusize',
    description=""" The limit for this configurable is 65536. """,
    tags=['agent_management', 'agent_operations', 'agent_configuration_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_pdusize(agent_num: int = Path(..., alias='agentNum')):
    """
    maximum PDU size.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/port',
    description=""" port number """,
    tags=['agent_management', 'agent_configuration_queries', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_port(agent_num: int = Path(..., alias='agentNum')):
    """
    port number
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/privdir',
    description=""" private directory of the agent. """,
    tags=[
        'agent_management',
        'agent_configuration_queries',
        'agent_operations',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_privdir(agent_num: int = Path(..., alias='agentNum')):
    """
    private directory of the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/protocol',
    description=""" protocols supported by agent as an array of strings """,
    tags=['agent_operations', 'protocol_management', 'command_interface_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_protocols(agent_num: int = Path(..., alias='agentNum')):
    """
    protocols supported by agent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/read',
    description=""" read community string """,
    tags=['agent_operations', 'agent_configuration_queries', 'snmp_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_read_community(agent_num: int = Path(..., alias='agentNum')):
    """
    read community string
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/scen',
    description=""" first scenario name """,
    tags=['agent_management', 'agent_control', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_scen(agent_num: int = Path(..., alias='agentNum')):
    """
    first scenario name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/sim',
    description=""" first simulation name """,
    tags=['agent_management', 'agent_operations', 'agent_configuration_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_sim(agent_num: int = Path(..., alias='agentNum')):
    """
    first simulation name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/start',
    description=""" relative start time """,
    tags=['agent_management', 'agent_operations', 'agent_control', 'timer_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_starttime(agent_num: int = Path(..., alias='agentNum')):
    """
    relative start time
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/state',
    description=""" 0-Unknown 1-Running 2-Stopped 3-Halted 4-Paused 5-Deleted 6-Stopping """,
    tags=['agent_management', 'agent_status_queries', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_agent_state(agent_num: int = Path(..., alias='agentNum')):
    """
    current running state of the agent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/state_changed',
    description=""" has the agent state changed? """,
    tags=['agent_management', 'agent_control', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_state_changed(agent_num: int = Path(..., alias='agentNum')):
    """
    has the agent state changed?
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/statistics',
    description=""" The statistics are returned as 64-bit decimal numbers for the following statistics, total, discarded, error, GET, GETNEXT, SET, GETBULK, trap, GET variables, GETNEXT variables, SET variables, GETBULK variables, INFORM sent, INFORM re-sent, INFORM timed out, INFORM acked, INFORM REPORT """,
    tags=['agent_management', 'agent_status_queries', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    current statistics of the agent instance
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/trace',
    description=""" SNMP PDU tracing """,
    tags=['snmp_operations', 'agent_management', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    SNMP PDU tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/validate',
    description=""" Is a bitmask in which with the following bits (from LSB) check for type, length, range, access """,
    tags=['snmp_operations', 'snmpv3_access_management', 'snmpv3_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_validate(agent_num: int = Path(..., alias='agentNum')):
    """
    SNMP SET validation policy.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/get/write',
    description=""" write community string """,
    tags=['agent_operations', 'snmp_operations', 'snmpv3_group_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_write_community(agent_num: int = Path(..., alias='agentNum')):
    """
    write community string
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/halt',
    description=""" Halt the current agent. """,
    tags=['agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def halt(agent_num: int = Path(..., alias='agentNum')):
    """
    Halt the current agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/ipalias/add/{IP}/{port}/{mask}/{interface}',
    description=""" port defaults to 161 if not specified. mask defaults to the class-based network mask for the address. interface defaults to the default network interface.  If port is set to 0, the system will automatically select a port number. This is useful for client-mode protocols, such as TFTP or TOD. Upon start of an IP alias with a 0 (auto-assigned) port number, its port will change to contain the value of the selected system port. """,
    tags=['agent_management', 'ipalias_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def add_ipalias(
    agent_num: int = Path(..., alias='agentNum'),
    i_p: str = Path(..., alias='IP'),
    port: int = ...,
    mask: str = ...,
    interface: str = ...,
):
    """
    Adds a new ipalias for the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/ipalias/delete/{IP}/{port}',
    description=""" port defaults to 161 if not specified. """,
    tags=['agent_management', 'ipalias_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def del_ipalias(
    agent_num: int = Path(..., alias='agentNum'),
    i_p: str = Path(..., alias='IP'),
    port: int = ...,
):
    """
    Deletes an existing ipalias from the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/ipalias/list',
    description=""" The agent host address (set with mimic agent set host) is not in this list, since it is already accessible separately with mimic agent get host. """,
    tags=['ipalias_management', 'agent_management', 'agent_configuration_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_ipaliases(agent_num: int = Path(..., alias='agentNum')):
    """
    Lists all the additional ipaliases configured for the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/ipalias/start/{IP}/{port}',
    description=""" port defaults to 161 if not specified. """,
    tags=['agent_management', 'ipalias_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def start_ipalias(
    agent_num: int = Path(..., alias='agentNum'),
    i_p: str = Path(..., alias='IP'),
    port: int = ...,
):
    """
    Starts an existing ipalias for the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/ipalias/status/{IP}/{port}',
    description=""" port defaults to 161 if not specified. """,
    tags=['agent_management', 'ipalias_management', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def status_ipalias(
    agent_num: int = Path(..., alias='agentNum'),
    i_p: str = Path(..., alias='IP'),
    port: int = ...,
):
    """
    Returns the status (0=down, 1=up) of an existing ipalias for the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/ipalias/stop/{IP}/{port}',
    description=""" port defaults to 161 if not specified. """,
    tags=['agent_management', 'ipalias_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def stop_ipalias(
    agent_num: int = Path(..., alias='agentNum'),
    i_p: str = Path(..., alias='IP'),
    port: int = ...,
):
    """
    Stops an existing ipalias for the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/pause',
    description=""" Pause the current agent. """,
    tags=['agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def pause_now(agent_num: int = Path(..., alias='agentNum')):
    """
    Pause the current agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/coap/get/args',
    description=""" Agent's COAP configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'agent_management',
        'agent_configuration_queries',
        'agent_operations',
        'protocol_coap_operations',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_coap_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's COAP argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/coap/get/config',
    description=""" Agent's COAP configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration_queries', 'protocol_coap_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_coap_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's COAP configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/coap/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=[
        'protocol_coap_operations',
        'protocol_statistics_queries',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_coap_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's COAP statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/coap/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=['protocol_coap_operations', 'agent_management', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_coap_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's COAP traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/coap/set/config/{argument}/{value}',
    description=""" Agent's COAP configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration', 'protocol_coap_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_coap_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's COAP configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/coap/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=['agent_management', 'protocol_coap_operations', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_coap_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's COAP traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/dhcp/get/args',
    description=""" Agent's DHCP configuration particulars """,
    tags=['protocol_dhcp_operations', 'dhcp_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_dhcp_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's DHCP argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/dhcp/get/config',
    description=""" Agent's DHCP configuration hwaddr,classid,add_options,script """,
    tags=[
        'agent_configuration_queries',
        'protocol_dhcp_operations',
        'dhcp_configuration_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_dhcp_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's DHCP configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/dhcp/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=[
        'protocol_dhcp_operations',
        'agent_configuration_queries',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_dhcp_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's DHCP statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/dhcp/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=[
        'protocol_dhcp_operations',
        'dhcp_configuration_management',
        'agent_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_dhcp_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's DHCP traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/dhcp/params',
    description=""" DHCP-OFFER message parameters """,
    tags=[
        'protocol_dhcp_operations',
        'dhcp_configuration_management',
        'agent_configuration_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_dhcp_params(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the parameters configured by the server in its DHCP-OFFER message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/dhcp/set/config/{argument}/{value}',
    description=""" Agent's DHCP configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'dhcp_configuration_management',
        'protocol_dhcp_operations',
        'agent_configuration',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_dhcp_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's DHCP configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/dhcp/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=[
        'protocol_dhcp_operations',
        'dhcp_configuration_management',
        'agent_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_dhcp_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's DHCP traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/ipmi/get/args',
    description=""" Agent's IPMI configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'agent_configuration_queries',
        'ipmi_configuration_management',
        'agent_operations',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ipmi_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's IPMI argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/ipmi/get/config',
    description=""" Agent's IPMI configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration_queries', 'ipmi_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ipmi_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's IPMI configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/ipmi/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=['ipmi_configuration_management', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ipmi_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's IPMI statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/ipmi/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=[
        'ipmi_configuration_management',
        'agent_management',
        'agent_operations',
        'protocol_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ipmi_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's IPMI traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/ipmi/get/{attr}',
    description=""" Attribute can be working_authtype ,session_id, outbound_seq, inbound_seq , field_N """,
    tags=['agent_management', 'agent_status_queries', 'agent_configuration_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ipmi_get_attr(
    agent_num: int = Path(..., alias='agentNum'), attr: str = ...
):
    """
    Show the outgoing message's attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/ipmi/set/config/{argument}/{value}',
    description=""" Agent's IPMI configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['ipmi_configuration_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ipmi_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's IPMI configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/ipmi/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=['agent_management', 'ipmi_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ipmi_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's IPMI traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/ipmi/set/{attr}/{value}',
    description=""" Attribute can be working_authtype ,session_id, outbound_seq, inbound_seq , field_N """,
    tags=['agent_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ipmi_set_attr(
    agent_num: int = Path(..., alias='agentNum'), attr: str = ..., value: str = ...
):
    """
    Set the outgoing message's attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/get/protstate',
    description=""" 0 - stopped, 2 - disconnected, 3 - connecting, 4 - connected, 5 - waiting for CONNACK, 6 - waiting for SUBACK, 7 - CONNACK received, in steady state """,
    tags=['mqtt_client_management', 'mqtt_client_operations', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_get_protstate(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's MQTT TCP connection state
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/get/state',
    description=""" 0 means stopped, 1 means running """,
    tags=[
        'mqtt_client_management',
        'mqtt_client_operations',
        'agent_status_queries',
        'agent_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_get_state(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's MQTT state
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/card',
    description=""" 0 or more """,
    tags=['agent_status_queries', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_message_card(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's current messages' cardinality
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/get/{msgNum}/{attr}',
    description=""" Attribute can be topic, interval, count, sent , pre, post, properties(list of PUBLISH properties), properties.i (i-th PUBLISH property), properties.PROP-NAME (PUBLISH property with name PROP-NAME) """,
    tags=['agent_status_queries', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_message_get(
    agent_num: int = Path(..., alias='agentNum'),
    msg_num: int = Path(..., alias='msgNum'),
    attr: str = ...,
):
    """
    Show the agent's message attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/set/{msgNum}/{attr}/{value}',
    description=""" Attribute can not be sent or properties . Use set/{msgNum}/count/{value} together with get/{msgNum}/count to throttle the outgoing MQTT message to the broker. """,
    tags=['agent_management', 'agent_operations', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_message_set(
    agent_num: int = Path(..., alias='agentNum'),
    msg_num: int = Path(..., alias='msgNum'),
    attr: str = ...,
    value: str = ...,
):
    """
    Set the agent's message attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/resubscribe/{subNum}',
    description=""" Restarts a subscription """,
    tags=['agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_resubscribe(
    agent_num: int = Path(..., alias='agentNum'),
    sub_num: int = Path(..., alias='subNum'),
):
    """
    Restart receiving messages from a subcription of the agent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/abort',
    description=""" Abort a connection """,
    tags=['mqtt_client_management', 'mqtt_client_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_runtime_abort(agent_num: int = Path(..., alias='agentNum')):
    """
    Abort agent's MQTT TCP session without sending DISCONNECT command
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/connect',
    description=""" Start a connection """,
    tags=[
        'agent_management',
        'mqtt_client_management',
        'mqtt_client_operations',
        'agent_control',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_runtime_connect(agent_num: int = Path(..., alias='agentNum')):
    """
    Start agent's MQTT TCP session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/disconnect',
    description=""" Graceful disconnect """,
    tags=[
        'mqtt_client_management',
        'mqtt_client_operations',
        'agent_control',
        'agent_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_runtime_disconnect(
    agent_num: int = Path(..., alias='agentNum')
):
    """
    Disconnect agent's MQTT TCP session by sending DISCONNECT command
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/broker/{brokerAddr}',
    description=""" Broker IP address """,
    tags=[
        'mqtt_client_management',
        'mqtt_client_operations',
        'agent_management',
        'agent_configuration',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_set_broker(
    agent_num: int = Path(..., alias='agentNum'),
    broker_addr: str = Path(..., alias='brokerAddr'),
):
    """
    Set the agent's MQTT TCP connection target broker
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/cleansession/{cleanOrNot}',
    description=""" 1 for clean session , 0 not """,
    tags=['agent_management', 'mqtt_client_management', 'mqtt_client_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_set_cleansession(
    agent_num: int = Path(..., alias='agentNum'),
    clean_or_not: int = Path(..., alias='cleanOrNot'),
):
    """
    Set the agent's MQTT session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/clientid/{clientID}',
    description=""" MQTT client ID """,
    tags=['mqtt_client_management', 'mqtt_client_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_set_clientid(
    agent_num: int = Path(..., alias='agentNum'),
    client_i_d: str = Path(..., alias='clientID'),
):
    """
    Set the agent's MQTT client ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/keepalive/{aliveTime}',
    description=""" Keep alive the TCP connection """,
    tags=['agent_management', 'mqtt_client_management', 'mqtt_client_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_set_keepalive(
    agent_num: int = Path(..., alias='agentNum'),
    alive_time: int = Path(..., alias='aliveTime'),
):
    """
    Set the agent's MQTT TCP keepalive
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/on_disconnect/{action}',
    description=""" Action to take when MQTT session is disconnected """,
    tags=[
        'agent_management',
        'mqtt_client_management',
        'mqtt_client_operations',
        'agent_control',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_set_on_disconnect(
    agent_num: int = Path(..., alias='agentNum'), action: str = ...
):
    """
    Set the agent's MQTT disconnection action
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/password/{password}',
    description=""" Client password """,
    tags=['mqtt_client_management', 'mqtt_client_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_set_password(
    agent_num: int = Path(..., alias='agentNum'), password: str = ...
):
    """
    Set the agent's MQTT client password
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/port/{port}',
    description=""" target TCP port """,
    tags=['mqtt_client_management', 'mqtt_client_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_set_port(
    agent_num: int = Path(..., alias='agentNum'), port: str = ...
):
    """
    Set the agent's MQTT TCP connection target port
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/username/{username}',
    description=""" Client username """,
    tags=['mqtt_client_management', 'mqtt_client_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_set_username(
    agent_num: int = Path(..., alias='agentNum'), username: str = ...
):
    """
    Set the agent's MQTT client username
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willmsg/{msg}',
    description=""" Will message """,
    tags=[
        'mqtt_client_management',
        'mqtt_client_operations',
        'agent_management',
        'agent_configuration',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_set_willmsg(
    agent_num: int = Path(..., alias='agentNum'), msg: str = ...
):
    """
    Set the agent's MQTT client's will
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willqos/{qos}',
    description=""" QOS field """,
    tags=['mqtt_client_management', 'mqtt_client_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_set_willqos(
    agent_num: int = Path(..., alias='agentNum'), qos: str = ...
):
    """
    Set the agent's MQTT will message's QOS field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willretain/{retain}',
    description=""" Retaining will """,
    tags=['mqtt_client_management', 'mqtt_client_operations', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_set_willretain(
    agent_num: int = Path(..., alias='agentNum'), retain: str = ...
):
    """
    Set the agent's MQTT retained will
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willtopic/{topic}',
    description=""" Will topic for the will message """,
    tags=['mqtt_client_management', 'mqtt_client_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_set_willtopic(
    agent_num: int = Path(..., alias='agentNum'), topic: str = ...
):
    """
    Set the agent's MQTT client will's topic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/card',
    description=""" 0 or more """,
    tags=['agent_management', 'agent_status_queries', 'agent_configuration_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_subscribe_card(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's current subscriptions' cardinality
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/get/{subNum}/{attr}',
    description=""" Attribute can be topic, properties(list of SUBSCRIBE properties), properties.i (i-th SUBSCRIBE property), properties.PROP-NAME (SUBSCRIBE property with name PROP-NAME) """,
    tags=[
        'agent_management',
        'agent_configuration_queries',
        'agent_operations',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_subscribe_get(
    agent_num: int = Path(..., alias='agentNum'),
    sub_num: int = Path(..., alias='subNum'),
    attr: str = ...,
):
    """
    Show the agent's subscription attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/set/{subNum}/{attr}/{value}',
    description=""" Attribute can not be properties . """,
    tags=['agent_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_subscribe_set(
    agent_num: int = Path(..., alias='agentNum'),
    sub_num: int = Path(..., alias='subNum'),
    attr: str = ...,
    value: str = ...,
):
    """
    Set the agent's subscribe attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/client/unsubscribe/{subNum}',
    description=""" Stops a subscription """,
    tags=['agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_client_unsubscribe(
    agent_num: int = Path(..., alias='agentNum'),
    sub_num: int = Path(..., alias='subNum'),
):
    """
    Stops receiving messages from a subcription of the agent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/get/args',
    description=""" Agent's MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['mqtt_client_operations', 'agent_configuration_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's MQTT argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/get/config',
    description=""" Agent's MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration_queries', 'mqtt_client_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's MQTT configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=[
        'agent_management',
        'agent_operations',
        'mqtt_client_operations',
        'protocol_statistics_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's MQTT statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=[
        'mqtt_client_management',
        'mqtt_client_operations',
        'protocol_management',
        'protocol_statistics_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's MQTT traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/set/config/{argument}/{value}',
    description=""" Agent's MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['mqtt_client_management', 'mqtt_client_operations', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's MQTT configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/mqtt/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=['mqtt_client_management', 'mqtt_client_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's MQTT traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/flow/change/dfs_interval/{interval}',
    description=""" Interval in msec . """,
    tags=['agent_management', 'netflow_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_change_dfs(
    agent_num: int = Path(..., alias='agentNum'), interval: int = ...
):
    """
    Change NETFLOW data export interval
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/flow/change/tfs_interval/{interval}',
    description=""" Interval in msec . """,
    tags=['netflow_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_change_tfs(
    agent_num: int = Path(..., alias='agentNum'), interval: int = ...
):
    """
    Change NETFLOW template export interval
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/flow/change/{flowset-uid}/{field-num}/{attr}/{value}',
    description=""" Change attributes """,
    tags=['netflow_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_change_attr(
    agent_num: int = Path(..., alias='agentNum'),
    flowset_uid: int = Path(..., alias='flowset-uid'),
    field_num: int = Path(..., alias='field-num'),
    attr: str = ...,
    value: str = ...,
):
    """
    Change NETFLOW export attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/flow/list',
    description=""" Show list of NETFLOW exports """,
    tags=['netflow_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_list(agent_num: int = Path(..., alias='agentNum')):
    """
    Show list of NETFLOW exports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/get/args',
    description=""" Agent's NETFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration_queries', 'netflow_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's NETFLOW argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/get/config',
    description=""" Agent's NETFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration_queries', 'netflow_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's NETFLOW configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=['netflow_operations', 'agent_status_queries', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's NETFLOW statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=['agent_management', 'netflow_operations', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's NETFLOW traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/halt',
    description=""" Halt NETFLOW traffic """,
    tags=['agent_management', 'agent_control', 'netflow_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_halt(agent_num: int = Path(..., alias='agentNum')):
    """
    Halt NETFLOW traffic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/reload',
    description=""" Reload NETFLOW configuration before resuming traffic """,
    tags=['agent_management', 'netflow_operations', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_reload(agent_num: int = Path(..., alias='agentNum')):
    """
    Reload NETFLOW configuration before resuming traffic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/resume',
    description=""" Resuming traffic """,
    tags=['agent_management', 'agent_control', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_resume(agent_num: int = Path(..., alias='agentNum')):
    """
    Resuming traffic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/set/collector/{collectorIP}',
    description=""" Allow changing collector without stopping agent """,
    tags=['agent_management', 'netflow_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_set_collector(
    agent_num: int = Path(..., alias='agentNum'),
    collector_i_p: str = Path(..., alias='collectorIP'),
):
    """
    Swap NETFLOW collector
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/set/config/{argument}/{value}',
    description=""" Agent's NETFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'agent_management',
        'agent_configuration',
        'netflow_operations',
        'agent_operations',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's NETFLOW configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/set/filename/{fileName}',
    description=""" Allow reloading the configuration file for an agent without stopping agent """,
    tags=['agent_management', 'netflow_operations', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_set_file_name(
    agent_num: int = Path(..., alias='agentNum'),
    file_name: str = Path(..., alias='fileName'),
):
    """
    Swap NETFLOW configuration file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/netflow/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=['netflow_operations', 'agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's NETFLOW traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/proxy/get/args',
    description=""" Agent's PROXY configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'agent_configuration_queries',
        'agent_operations',
        'proxy_operations',
        'protocol_proxy_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's PROXY argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/proxy/get/config',
    description=""" Agent's PROXY configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration_queries', 'agent_operations', 'proxy_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's PROXY configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/proxy/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=['protocol_proxy_management', 'proxy_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's PROXY statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/proxy/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=['proxy_operations', 'agent_management', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's PROXY traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/protocol/msg/proxy/port/add/{port}/{target}/{targetPort}',
    description=""" Additional proxy target """,
    tags=['agent_management', 'proxy_operations', 'protocol_proxy_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_port_add(
    agent_num: int = Path(..., alias='agentNum'),
    port: int = ...,
    target: str = ...,
    target_port: int = Path(..., alias='targetPort'),
):
    """
    Add individual proxy target on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/proxy/port/isStarted/{port}',
    description=""" Check individual target """,
    tags=['agent_management', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_port_isstarted(
    agent_num: int = Path(..., alias='agentNum'), port: int = ...
):
    """
    Check individual target
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/proxy/port/list',
    tags=['protocol_proxy_management', 'proxy_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_port_list(agent_num: int = Path(..., alias='agentNum')):
    """
    List all proxy targets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/protocol/msg/proxy/port/remove/{port}',
    description=""" Remove proxy target """,
    tags=['agent_management', 'protocol_proxy_management', 'proxy_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_port_remove(
    agent_num: int = Path(..., alias='agentNum'), port: int = ...
):
    """
    Remove individual proxy target on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/proxy/port/start/{port}',
    description=""" Start additional target """,
    tags=['agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_port_start(
    agent_num: int = Path(..., alias='agentNum'), port: int = ...
):
    """
    Start additional target
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/proxy/port/stop/{port}',
    description=""" Stop additional target """,
    tags=['agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_port_stop(
    agent_num: int = Path(..., alias='agentNum'), port: int = ...
):
    """
    Stop additional target
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/proxy/set/config/{argument}/{value}',
    description=""" Agent's PROXY configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration', 'proxy_operations', 'protocol_proxy_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's PROXY configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/proxy/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=['agent_management', 'protocol_proxy_management', 'proxy_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's PROXY traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/sflow/get/args',
    description=""" Agent's SFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'agent_configuration_queries',
        'sflow_configuration_operations',
        'agent_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_sflow_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SFLOW argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/sflow/get/config',
    description=""" Agent's SFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['sflow_configuration_operations', 'agent_configuration_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_sflow_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SFLOW configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/sflow/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=[
        'sflow_configuration_operations',
        'agent_management',
        'agent_status_queries',
        'protocol_statistics_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_sflow_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SFLOW statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/sflow/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=['sflow_configuration_operations', 'agent_management', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_sflow_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SFLOW traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/sflow/halt',
    description=""" Halt SFLOW traffic """,
    tags=['agent_control', 'agent_management', 'sflow_configuration_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_sflow_halt(agent_num: int = Path(..., alias='agentNum')):
    """
    Halt SFLOW traffic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/sflow/reload',
    description=""" Reload SFLOW configuration before resuming traffic """,
    tags=['agent_management', 'sflow_configuration_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_sflow_reload(agent_num: int = Path(..., alias='agentNum')):
    """
    Reload SFLOW configuration before resuming traffic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/sflow/resume',
    description=""" Resuming traffic """,
    tags=['agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_sflow_resume(agent_num: int = Path(..., alias='agentNum')):
    """
    Resuming traffic
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/sflow/set/config/{argument}/{value}',
    description=""" Agent's SFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['sflow_configuration_operations', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_sflow_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's SFLOW configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/sflow/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=['sflow_configuration_operations', 'agent_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_sflow_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's SFLOW traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/args',
    description=""" Agent's SNMPTCP configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['snmptcp_management', 'agent_configuration_queries', 'snmp_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmptcp_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SNMPTCP argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/config',
    description=""" Agent's SNMPTCP configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration_queries', 'snmptcp_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmptcp_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SNMPTCP configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=['snmptcp_management', 'snmp_operations', 'protocol_statistics_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmptcp_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SNMPTCP statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmptcp/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=['snmptcp_management', 'snmp_operations', 'protocol_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmptcp_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SNMPTCP traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/disable/{ipaddress}/{port}',
    description=""" By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent """,
    tags=['ipalias_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmptcp_ipalias_disable(
    agent_num: int = Path(..., alias='agentNum'), ipaddress: str = ..., port: int = ...
):
    """
    Disable individual IP aliases on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/enable/{ipaddress}/{port}',
    description=""" By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent """,
    tags=['ipalias_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmptcp_ipalias_enable(
    agent_num: int = Path(..., alias='agentNum'), ipaddress: str = ..., port: int = ...
):
    """
    Enable individual IP aliases on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/isenabled/{ipaddress}/{port}',
    description=""" By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent """,
    tags=['ipalias_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmptcp_ipalias_isenabled(
    agent_num: int = Path(..., alias='agentNum'), ipaddress: str = ..., port: int = ...
):
    """
    Check individual IP aliases on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/list',
    description=""" By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent """,
    tags=['ipalias_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmptcp_ipalias_list(agent_num: int = Path(..., alias='agentNum')):
    """
    List all IP aliases on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/snmptcp/set/config/{argument}/{value}',
    description=""" Agent's SNMPTCP configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['snmptcp_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmptcp_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's SNMPTCP configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/snmptcp/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=['snmptcp_management', 'agent_management', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmptcp_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's SNMPTCP traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/add/{groupName}/{prefix}/{securityModel}/{securityLevel}/{contextMatch}/{readView}/{writeView}/{notifyView}',
    description=""" Adds a new access entry with the specified parameters. """,
    tags=[
        'access_control_management',
        'snmpv3_access_management',
        'snmpv3_group_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_access_add(
    agent_num: int = Path(..., alias='agentNum'),
    group_name: str = Path(..., alias='groupName'),
    prefix: str = ...,
    security_model: str = Path(..., alias='securityModel'),
    security_level: str = Path(..., alias='securityLevel'),
    context_match: str = Path(..., alias='contextMatch'),
    read_view: str = Path(..., alias='readView'),
    write_view: str = Path(..., alias='writeView'),
    notify_view: str = Path(..., alias='notifyView'),
):
    """
    Adds a new access entry with the specified parameters.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/clear',
    description=""" Clears all access entries. """,
    tags=['access_control_management', 'snmpv3_access_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_access_clear(agent_num: int = Path(..., alias='agentNum')):
    """
    Clears all access entries.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/del/{accessName}',
    description=""" Deletes the specified access entry. """,
    tags=['access_control_management', 'snmpv3_access_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_access_del(
    agent_num: int = Path(..., alias='agentNum'),
    access_name: str = Path(..., alias='accessName'),
):
    """
    Deletes the specified access entry.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/access/list',
    description=""" Returns the current acccess entries as an array of strings. """,
    tags=[
        'snmpv3_access_management',
        'snmpv3_group_management',
        'snmpv3_user_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_access_list(agent_num: int = Path(..., alias='agentNum')):
    """
    Returns the current acccess entries as an array of strings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/config',
    description=""" Returns the SNMPv3 configuration. """,
    tags=['snmpv3_configuration', 'agent_configuration_queries', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Returns the SNMPv3 configuration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/context_engineid',
    description=""" Retrieves the contextEngineID for the agent instance. """,
    tags=['agent_management', 'agent_configuration_queries', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_get_context_engineid(agent_num: int = Path(..., alias='agentNum')):
    """
    Retrieves the contextEngineID for the agent instance.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/engineboots',
    description=""" Retrieves the number of times the agent has been restarted. """,
    tags=['agent_management', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_get_engineboots(agent_num: int = Path(..., alias='agentNum')):
    """
    Retrieves the number of times the agent has been restarted.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/engineid',
    description=""" For stopped agents, this operation is meaningless. If not explicitly set by the user then the autogenerated engineID is returned. The format of the engineID is in the familiar hex format, eg. \x01 23 45 67 89... """,
    tags=['agent_management', 'agent_configuration_queries', 'snmp_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_get_engineid(agent_num: int = Path(..., alias='agentNum')):
    """
    For started agents, retrieves the current engineID in use by the snmpv3 module.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/get/enginetime',
    description=""" Retrieves the time in seconds for which the agent has been running. """,
    tags=['agent_management', 'agent_status_queries', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_get_enginetime(agent_num: int = Path(..., alias='agentNum')):
    """
    Retrieves the time in seconds for which the agent has been running.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/add/{groupName}/{securityModel}/{securityName}',
    description=""" Adds a new group entry with the specified parameters. """,
    tags=['snmpv3_group_management', 'access_control_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_group_add(
    agent_num: int = Path(..., alias='agentNum'),
    group_name: str = Path(..., alias='groupName'),
    security_model: str = Path(..., alias='securityModel'),
    security_name: str = Path(..., alias='securityName'),
):
    """
    Adds a new group entry with the specified parameters.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/clear',
    description=""" Clears all group entries. """,
    tags=['agent_management', 'agent_control', 'agent_store_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_group_clear(agent_num: int = Path(..., alias='agentNum')):
    """
    Clears all group entries.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/del/{groupName}',
    description=""" Deletes the specified group entry. """,
    tags=['snmpv3_group_management', 'agent_management', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_group_del(
    agent_num: int = Path(..., alias='agentNum'),
    group_name: str = Path(..., alias='groupName'),
):
    """
    Deletes the specified group entry.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/group/list',
    description=""" Returns the current group entries as an array of strings. """,
    tags=['agent_management', 'agent_status_queries', 'agent_store_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_group_list(agent_num: int = Path(..., alias='agentNum')):
    """
    Returns the current group entries as an array of strings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/set/config/{parameter}/{value}',
    description=""" Changes the SNMPv3 configuration. """,
    tags=[
        'snmpv3_configuration',
        'snmpv3_access_management',
        'snmpv3_group_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_set_config(
    agent_num: int = Path(..., alias='agentNum'), parameter: str = ..., value: str = ...
):
    """
    Changes the SNMPv3 configuration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/add/{userName}/{securityName}/{authProtocol}/{authKey}/{privProtocol}/{privKey}',
    description=""" Adds a new user entry with the specified parameters. """,
    tags=[
        'access_control_management',
        'snmpv3_user_management',
        'snmpv3_access_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_user_add(
    agent_num: int = Path(..., alias='agentNum'),
    user_name: str = Path(..., alias='userName'),
    security_name: str = Path(..., alias='securityName'),
    auth_protocol: str = Path(..., alias='authProtocol'),
    auth_key: str = Path(..., alias='authKey'),
    priv_protocol: str = Path(..., alias='privProtocol'),
    priv_key: str = Path(..., alias='privKey'),
):
    """
    Adds a new user entry with the specified parameters.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/clear',
    description=""" Clears all user entries. """,
    tags=['access_control_management', 'agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_user_clear(agent_num: int = Path(..., alias='agentNum')):
    """
    Clears all user entries.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/del/{userName}',
    description=""" Deletes the specified user entry. """,
    tags=[
        'access_control_management',
        'snmpv3_user_management',
        'snmpv3_access_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_user_del(
    agent_num: int = Path(..., alias='agentNum'),
    user_name: str = Path(..., alias='userName'),
):
    """
    Deletes the specified user entry.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/user/list',
    description=""" Returns the current user entries as a Tcl list. """,
    tags=['agent_configuration_queries', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_user_list(agent_num: int = Path(..., alias='agentNum')):
    """
    Returns the current user entries as a Tcl list.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/usm/save',
    description=""" Saves current user settings in the currently loaded USM config file. """,
    tags=['configuration_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_usm_save(agent_num: int = Path(..., alias='agentNum')):
    """
    Saves current user settings in the currently loaded USM config file.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/usm/saveas/{filename}',
    description=""" Saves current user settings in the specified USM config file. """,
    tags=['configuration_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_usm_saveas(
    agent_num: int = Path(..., alias='agentNum'), filename: str = ...
):
    """
    Saves current user settings in the specified USM config file.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/vacm/save',
    description=""" Saves current group, access, view settings in the currently loaded VACM config file. """,
    tags=['configuration_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_vacm_save(agent_num: int = Path(..., alias='agentNum')):
    """
    Saves current group, access, view settings in the currently loaded VACM config file.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/vacm/saveas/{filename}',
    description=""" Saves current group, access, view settings in the specified VACM config file. """,
    tags=[
        'configuration_management',
        'snmpv3_access_management',
        'snmpv3_view_management',
        'snmpv3_group_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_vacm_saveas(
    agent_num: int = Path(..., alias='agentNum'), filename: str = ...
):
    """
    Saves current group, access, view settings in the specified VACM config file.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/add/{viewName}/{viewType}/{subtree}/{mask}',
    description=""" Adds a new view entry with the specified parameters. """,
    tags=['snmpv3_view_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_view_add(
    agent_num: int = Path(..., alias='agentNum'),
    view_name: str = Path(..., alias='viewName'),
    view_type: str = Path(..., alias='viewType'),
    subtree: str = ...,
    mask: str = ...,
):
    """
    Adds a new view entry with the specified parameters.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/clear',
    description=""" Clears all view entries. """,
    tags=['agent_management', 'agent_control', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_view_clear(agent_num: int = Path(..., alias='agentNum')):
    """
    Clears all view entries.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/del/{viewName}',
    description=""" Deletes the specified view entry. """,
    tags=['snmpv3_view_management', 'snmpv3_access_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_view_del(
    agent_num: int = Path(..., alias='agentNum'),
    view_name: str = Path(..., alias='viewName'),
):
    """
    Deletes the specified view entry.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/snmpv3/view/list',
    description=""" Returns the current view entries as an array of strings. """,
    tags=['agent_status_queries', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmpv3_view_list(agent_num: int = Path(..., alias='agentNum')):
    """
    Returns the current view entries as an array of strings.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/ssh/get/args',
    description=""" Agent's SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration_queries', 'ssh_agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ssh_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SSH argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/ssh/get/config',
    description=""" Agent's SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'ssh_configuration_management',
        'agent_configuration_queries',
        'agent_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ssh_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SSH configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/ssh/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=[
        'agent_management',
        'ssh_agent_management',
        'ssh_configuration_management',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ssh_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SSH statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/ssh/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=[
        'ssh_configuration_management',
        'agent_management',
        'protocol_management',
        'agent_operations',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ssh_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SSH traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/disable/{ipaddress}/{port}',
    description=""" By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent """,
    tags=['ipalias_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ssh_ipalias_disable(
    agent_num: int = Path(..., alias='agentNum'), ipaddress: str = ..., port: int = ...
):
    """
    Disable individual IP aliases on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/enable/{ipaddress}/{port}',
    description=""" By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent """,
    tags=['ipalias_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ssh_ipalias_enable(
    agent_num: int = Path(..., alias='agentNum'), ipaddress: str = ..., port: int = ...
):
    """
    Enable individual IP aliases on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/isenabled/{ipaddress}/{port}',
    description=""" By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent """,
    tags=['ipalias_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ssh_ipalias_isenabled(
    agent_num: int = Path(..., alias='agentNum'), ipaddress: str = ..., port: int = ...
):
    """
    Check individual IP aliases on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/list',
    description=""" By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent """,
    tags=['ipalias_management', 'agent_management', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ssh_ipalias_list(agent_num: int = Path(..., alias='agentNum')):
    """
    List all IP aliases on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/ssh/set/config/{argument}/{value}',
    description=""" Agent's SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'ssh_agent_management',
        'ssh_configuration_management',
        'agent_configuration',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ssh_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's SSH configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/ssh/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=['ssh_configuration_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ssh_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's SSH traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/syslog/get/args',
    description=""" Agent's SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['syslog_management', 'agent_configuration_queries', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_syslog_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SYSLOG argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/syslog/get/config',
    description=""" Agent's SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration_queries', 'syslog_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_syslog_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SYSLOG configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/syslog/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=['syslog_management', 'agent_status_queries', 'protocol_statistics_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_syslog_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SYSLOG statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/syslog/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=['syslog_management', 'agent_operations', 'protocol_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_syslog_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's SYSLOG traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/syslog/get/{attr}',
    description=""" Attribute can be server , sequence , separator , hostname , timestamp """,
    tags=[
        'agent_management',
        'agent_configuration_queries',
        'agent_operations',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_syslog_get_attr(
    agent_num: int = Path(..., alias='agentNum'), attr: str = ...
):
    """
    Show the outgoing message's attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/protocol/msg/syslog/send/{pri}',
    description=""" 1 to enable, 0 to disable """,
    tags=['syslog_management', 'agent_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_syslog_send(
    agent_num: int = Path(..., alias='agentNum'), pri: int = ..., body: SyslogMsg = ...
):
    """
    Set the agent's SYSLOG traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/syslog/set/config/{argument}/{value}',
    description=""" Agent's SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'agent_management',
        'agent_configuration',
        'syslog_management',
        'agent_operations',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_syslog_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's SYSLOG configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/syslog/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=['agent_management', 'syslog_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_syslog_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's SYSLOG traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/syslog/set/{attr}/{value}',
    description=""" Attribute can be server , sequence , separator , hostname , timestamp """,
    tags=['agent_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_syslog_set_attr(
    agent_num: int = Path(..., alias='agentNum'), attr: str = ..., value: str = ...
):
    """
    Set the outgoing message's attributes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/connection/logon/{connectionID}/{user}/{password}',
    description=""" Logon change allows (hidden) commands for a different access mode to run. """,
    tags=[
        'access_control_management',
        'snmpv3_access_management',
        'snmpv3_user_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_connection_logon(
    agent_num: int = Path(..., alias='agentNum'),
    connection_i_d: int = Path(..., alias='connectionID'),
    user: str = ...,
    password: str = ...,
):
    """
    Changes the connection's current logon.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/connection/request/{connectionID}/{command}',
    description=""" Equivalent of the command typed in by the user. """,
    tags=['agent_operations', 'agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_connection_request(
    agent_num: int = Path(..., alias='agentNum'),
    connection_i_d: int = Path(..., alias='connectionID'),
    command: str = ...,
):
    """
    Executes the command asynchronously .
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/connection/signal/{connectionID}/{signalName}',
    description=""" Signal name is either connect or idle """,
    tags=['agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_connection_signal(
    agent_num: int = Path(..., alias='agentNum'),
    connection_i_d: int = Path(..., alias='connectionID'),
    signal_name: str = Path(..., alias='signalName'),
):
    """
    Triggers the asynchronous signal event with the specified signal name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/get/args',
    description=""" Agent's TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'telnet_configuration_management',
        'agent_management',
        'agent_configuration_queries',
        'agent_operations',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TELNET argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/get/config',
    description=""" Agent's TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'telnet_configuration_management',
        'agent_configuration_queries',
        'agent_operations',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TELNET configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=['agent_management', 'agent_operations', 'telnet_statistics'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TELNET statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=[
        'telnet_connection_management',
        'telnet_configuration_management',
        'protocol_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TELNET traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/disable/{ipaddress}/{port}',
    description=""" By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent """,
    tags=['ipalias_management', 'agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_ipalias_disable(
    agent_num: int = Path(..., alias='agentNum'), ipaddress: str = ..., port: int = ...
):
    """
    Disable individual IP aliases on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/enable/{ipaddress}/{port}',
    description=""" By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent """,
    tags=['ipalias_management', 'agent_management', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_ipalias_enable(
    agent_num: int = Path(..., alias='agentNum'), ipaddress: str = ..., port: int = ...
):
    """
    Enable individual IP aliases on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/isenabled/{ipaddress}/{port}',
    description=""" By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent """,
    tags=['ipalias_management', 'agent_management', 'agent_configuration_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_ipalias_isenabled(
    agent_num: int = Path(..., alias='agentNum'), ipaddress: str = ..., port: int = ...
):
    """
    Check individual IP aliases on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/list',
    description=""" By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent """,
    tags=['ipalias_management', 'agent_management', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_ipalias_list(agent_num: int = Path(..., alias='agentNum')):
    """
    List all IP aliases on the agent and the simulator host
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/connections',
    description=""" IDs of all connected connections """,
    tags=['agent_management', 'telnet_connection_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_server_get_connections(
    agent_num: int = Path(..., alias='agentNum')
):
    """
    Show the agent's TELNET connections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/keymap',
    description=""" Keymap file name """,
    tags=['agent_configuration_queries', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_server_get_keymap(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TELNET keymap file name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/rulesdb',
    description=""" Rules db file name """,
    tags=['agent_configuration_queries', 'telnet_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_server_get_rulesdb(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TELNET rules db file name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/state',
    description=""" Return 1 means accepting connections, 0 not """,
    tags=[
        'telnet_configuration_management',
        'agent_status_queries',
        'agent_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_server_get_state(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TELNET server state
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/userdb',
    description=""" User db file name """,
    tags=['telnet_configuration_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_server_get_userdb(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TELNET user db file name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/server/get/users',
    description=""" List of users """,
    tags=['telnet_connection_management', 'telnet_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_server_get_users(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TELNET users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/set/config/{argument}/{value}',
    description=""" Agent's TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['telnet_configuration_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's TELNET configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/telnet/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=['telnet_configuration_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's TELNET traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/get/args',
    description=""" Agent's TFTP configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration_queries', 'tftp_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TFTP argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/get/config',
    description=""" Agent's TFTP configuration """,
    tags=['agent_configuration_queries', 'tftp_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TFTP configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=['tftp_operations', 'protocol_statistics_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TFTP statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=['tftp_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TFTP traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/session/read/server/{srcfile}',
    description=""" Session ID is returned """,
    tags=['agent_management', 'agent_operations', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_session_read(
    agent_num: int = Path(..., alias='agentNum'), srcfile: str = ...
):
    """
    Create a read session to download srcfile from server
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/session/write/server/{srcfile}',
    description=""" Session ID is returned """,
    tags=[
        'agent_management',
        'agent_control',
        'agent_operations',
        'agent_configuration',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_session_write(
    agent_num: int = Path(..., alias='agentNum'), srcfile: str = ...
):
    """
    Create a read session to upload srcfile to server
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/set/config/{argument}/{value}',
    description=""" Agent's TFTP configuration """,
    tags=['agent_configuration', 'tftp_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's TFTP configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=['tftp_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's TFTP traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/get/{parameter}',
    description=""" Parameter is server , port , or dstfile """,
    tags=['tftp_operations', 'agent_management', 'agent_configuration_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_session_get_parameter(
    agent_num: int = Path(..., alias='agentNum'),
    session_i_d: str = Path(..., alias='sessionID'),
    parameter: str = ...,
):
    """
    Show a parameter of a TFTP sesssion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/set/{parameter}/{value}',
    description=""" Parameter is server , port , or dstfile """,
    tags=['tftp_operations', 'agent_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_session_set_parameter(
    agent_num: int = Path(..., alias='agentNum'),
    session_i_d: str = Path(..., alias='sessionID'),
    parameter: str = ...,
    value: str = ...,
):
    """
    Set a parameter of a TFTP sesssion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/start',
    description=""" Start uploading or downloading the file """,
    tags=['tftp_operations', 'agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_session_start(
    agent_num: int = Path(..., alias='agentNum'),
    session_i_d: str = Path(..., alias='sessionID'),
):
    """
    Start a TFTP sesssion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/status',
    description=""" Status includes running state, bytes transfered, and time elapsed """,
    tags=['tftp_operations', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_session_status(
    agent_num: int = Path(..., alias='agentNum'),
    session_i_d: str = Path(..., alias='sessionID'),
):
    """
    Check a TFTP sesssion's status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/stop',
    description=""" Stop uploading or downloading the file """,
    tags=['agent_management', 'agent_control', 'tftp_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_session_stop(
    agent_num: int = Path(..., alias='agentNum'),
    session_i_d: str = Path(..., alias='sessionID'),
):
    """
    Stop a TFTP sesssion
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/tod/get/args',
    description=""" Agent's TOD configuration """,
    tags=['tod_operations', 'agent_configuration_queries', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tod_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TOD argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/tod/get/config',
    description=""" Agent's TOD configuration """,
    tags=['agent_configuration_queries', 'agent_operations', 'tod_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tod_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TOD configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/tod/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=['tod_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tod_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TOD statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/tod/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=['agent_management', 'protocol_statistics_queries', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tod_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's TOD traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/tod/gettime/server/{serverAddr}/port/{portNum}/script/{scriptName}/timeout/{timeSec}/retries/{numRetries}',
    description=""" Retrive time from server """,
    tags=['tod_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tod_gettime(
    agent_num: int = Path(..., alias='agentNum'),
    server_addr: str = Path(..., alias='serverAddr'),
    port_num: int = Path(..., alias='portNum'),
    script_name: str = Path(..., alias='scriptName'),
    time_sec: int = Path(..., alias='timeSec'),
    num_retries: int = Path(..., alias='numRetries'),
):
    """
    Retrieve TOD time
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/tod/set/config/{argument}/{value}',
    description=""" Agent's TOD configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'agent_management',
        'agent_configuration',
        'tod_operations',
        'agent_configuration_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tod_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's TOD configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/tod/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=['agent_management', 'protocol_coap_operations', 'tod_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tod_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's TOD traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/web/get/args',
    description=""" Agent's WEB configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'agent_management',
        'agent_configuration_queries',
        'agent_operations',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_get_args(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's WEB argument structure
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/web/get/config',
    description=""" Agent's WEB configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=['agent_configuration_queries', 'agent_management', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_get_config(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's WEB configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/web/get/statistics',
    description=""" Statistics of fields indicated in the headers """,
    tags=['agent_status_queries', 'agent_management', 'agent_configuration_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_get_statistics(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's WEB statistics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/web/get/trace',
    description=""" Trace 1 means enabled, 0 means not """,
    tags=[
        'protocol_management',
        'protocol_statistics_queries',
        'agent_management',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_get_trace(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's WEB traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/protocol/msg/web/port/add/{port}',
    description=""" Add port """,
    tags=['web_port_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_port_add(
    agent_num: int = Path(..., alias='agentNum'), port: int = ...
):
    """
    Add the agent's WEB port
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/msg/web/port/exists/{port}',
    description=""" Check the port. 1 means existing, 0 means not """,
    tags=[
        'agent_management',
        'web_port_management',
        'agent_configuration_queries',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_port_exists(
    agent_num: int = Path(..., alias='agentNum'), port: int = ...
):
    """
    Show the agent's WEB port
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/protocol/msg/web/port/remove/{port}',
    description=""" Remove port """,
    tags=['agent_management', 'web_port_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_port_remove(
    agent_num: int = Path(..., alias='agentNum'), port: int = ...
):
    """
    Remove the agent's WEB port
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/web/port/set/{port}/{protocol}/{version}',
    description=""" Set port """,
    tags=['agent_management', 'web_port_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_port_set(
    agent_num: int = Path(..., alias='agentNum'),
    port: int = ...,
    protocol: str = ...,
    version: str = ...,
):
    """
    Set the agent's WEB port attribute
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/web/port/start/{port}',
    description=""" Start port """,
    tags=['web_port_management', 'agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_port_start(
    agent_num: int = Path(..., alias='agentNum'), port: int = ...
):
    """
    Start the agent's WEB port
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/web/port/stop/{port}',
    description=""" Stop port """,
    tags=['agent_management', 'web_port_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_port_stop(
    agent_num: int = Path(..., alias='agentNum'), port: int = ...
):
    """
    Stop the agent's WEB port
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/web/set/config/{argument}/{value}',
    description=""" Agent's WEB configuration with port,rule,prompt,paging_prompt,userdb,keymap """,
    tags=[
        'agent_configuration',
        'agent_management',
        'agent_operations',
        'configuration_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_set_config(
    agent_num: int = Path(..., alias='agentNum'), argument: str = ..., value: str = ...
):
    """
    Set the agent's WEB configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/protocol/msg/web/set/trace/{enableOrNot}',
    description=""" 1 to enable, 0 to disable """,
    tags=[
        'agent_management',
        'agent_operations',
        'protocol_management',
        'agent_configuration',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_set_trace(
    agent_num: int = Path(..., alias='agentNum'),
    enable_or_not: str = Path(..., alias='enableOrNot'),
):
    """
    Set the agent's WEB traffic tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/protocol/{prot}/get/config',
    description=""" Returns the protocol's configuration. """,
    tags=['agent_configuration_queries', 'agent_operations', 'protocol_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_get_config(agent_num: int = Path(..., alias='agentNum'), prot: str = ...):
    """
    Returns the protocol's configuration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/reload',
    description=""" This only works for halted agents. The net effect is the same as restarting an agent (ie. stop, start, halt), but without disconnecting the network (and thus existing connections). """,
    tags=['agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def reload(agent_num: int = Path(..., alias='agentNum')):
    """
    Reload the current agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/remove',
    description=""" For speed, this operation will complete asynchronously. The same synchronization considerations apply as in /mimic/agent/start. """,
    tags=['agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def agent_remove(agent_num: int = Path(..., alias='agentNum')):
    """
    Remove the current agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/resume',
    description=""" Resume the current agent. """,
    tags=['agent_management', 'agent_control', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def resume(agent_num: int = Path(..., alias='agentNum')):
    """
    Resume the current agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/save',
    description=""" Save agent MIB values. """,
    tags=['agent_management', 'mib_object_management', 'agent_store_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def save(agent_num: int = Path(..., alias='agentNum')):
    """
    Save agent MIB values.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/delay/{delay}',
    description=""" The minimum granularity is 10 msec. """,
    tags=['agent_management', 'agent_operations', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_delay(agent_num: int = Path(..., alias='agentNum'), delay: int = ...):
    """
    one-way transit delay in msec
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/drops/{drops}',
    description=""" 0 means no drops """,
    tags=['agent_management', 'agent_control', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_drops(agent_num: int = Path(..., alias='agentNum'), drops: int = ...):
    """
    drop rate (every N-th PDU)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/host/{host}',
    description=""" Currently, only IPv4 addresses are allowed as the main address of the agent, but both IPv4 and IPv6 addresses are allowed as IP aliases for the agent. """,
    tags=[
        'agent_management',
        'agent_configuration_queries',
        'agent_operations',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_host(agent_num: int = Path(..., alias='agentNum'), host: str = ...):
    """
    host address of the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/inform_timeout/{inform_timeout}',
    description=""" The agent will retransmit INFORM PDUs at this interval until it has received a reply from the manager. """,
    tags=['agent_management', 'agent_operations', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_inform_timeout(
    agent_num: int = Path(..., alias='agentNum'), inform_timeout: int = ...
):
    """
    timeout in seconds for retransmitting INFORM PDUs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/interface/{interface}',
    description=""" network interface card for the agent """,
    tags=['agent_management', 'agent_configuration', 'network_interface_info'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_interface(agent_num: int = Path(..., alias='agentNum'), interface: str = ...):
    """
    network interface card for the agent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/mask/{mask}',
    description=""" subnet mask of the agent. """,
    tags=['agent_configuration_queries', 'agent_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_mask(agent_num: int = Path(..., alias='agentNum'), mask: str = ...):
    """
    subnet mask of the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/mibs',
    description=""" set of MIBs, simulations and scenarios """,
    tags=[
        'agent_management',
        'mimic_agent_control',
        'mib_object_management',
        'lab_configuration_handling',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_mibs(
    agent_num: int = Path(..., alias='agentNum'),
    body: MimicAgentAgentNumSetMibsPutRequest = ...,
):
    """
    set of MIBs, simulations and scenarios
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/oiddir/{oiddir}',
    description=""" MIB directory of the agent. """,
    tags=['mib_object_management', 'agent_management', 'agent_configuration_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_oiddir(agent_num: int = Path(..., alias='agentNum'), oiddir: str = ...):
    """
    MIB directory of the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/owner/{owner}',
    description=""" owner of the agent """,
    tags=['agent_management', 'agent_control', 'snmpv3_user_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_owner(agent_num: int = Path(..., alias='agentNum'), owner: str = ...):
    """
    owner of the agent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/pdusize/{pdusize}',
    description=""" The limit for this configurable is 65536 """,
    tags=[
        'agent_configuration_queries',
        'agent_operations',
        'agent_management',
        'agent_configuration',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_pdusize(agent_num: int = Path(..., alias='agentNum'), pdusize: int = ...):
    """
    maximum PDU size
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/port/{port}',
    description=""" port number """,
    tags=[
        'agent_management',
        'agent_configuration_queries',
        'agent_operations',
        'agent_configuration',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_port(agent_num: int = Path(..., alias='agentNum'), port: int = ...):
    """
    port number
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/privdir/{privdir}',
    description=""" private directory of the agent. """,
    tags=['agent_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_privdir(agent_num: int = Path(..., alias='agentNum'), privdir: str = ...):
    """
    private directory of the agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/protocol',
    description=""" protocols supported by agent as a comma-separated list """,
    tags=[
        'agent_management',
        'agent_configuration_queries',
        'agent_operations',
        'command_interface_queries',
        'protocol_management',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_protocols(
    agent_num: int = Path(..., alias='agentNum'),
    body: MimicAgentAgentNumSetProtocolPutRequest = ...,
):
    """
    protocols supported by agent as a comma-separated list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/read/{read}',
    description=""" read community string """,
    tags=['agent_operations', 'snmp_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_read_community(agent_num: int = Path(..., alias='agentNum'), read: str = ...):
    """
    read community string
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/start/{start}',
    description=""" relative start time """,
    tags=['agent_management', 'agent_operations', 'agent_control', 'timer_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_starttime(agent_num: int = Path(..., alias='agentNum'), start: int = ...):
    """
    relative start time
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/trace/{trace}',
    description=""" SNMP PDU tracing """,
    tags=['snmp_operations', 'agent_management', 'protocol_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_trace(agent_num: int = Path(..., alias='agentNum'), trace: int = ...):
    """
    SNMP PDU tracing
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/validate/{validate}',
    description=""" Is a bitmask in which with the following bits (from LSB) check for type, length, range, access. A default value of 65535 does all validation checking. """,
    tags=['snmp_operations', 'snmpv3_access_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_validate(
    agent_num: int = Path(..., alias='agentNum'),
    validate_: int = Path(..., alias='validate'),
):
    """
    SNMP SET validation policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/set/write/{write}',
    description=""" write community string """,
    tags=['agent_management', 'agent_operations', 'snmpv3_access_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_write_community(agent_num: int = Path(..., alias='agentNum'), write: str = ...):
    """
    write community string
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/start',
    description=""" For speed, this operation will complete asynchronously. A successful return from this command means the starting of the agent is in progress. If you need to rely on the agent to have completed startup, you should wait for it's state to become RUNNING. """,
    tags=['agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def start(agent_num: int = Path(..., alias='agentNum')):
    """
    Start the current agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/stop',
    description=""" Agent primary IP address """,
    tags=[
        'agent_management',
        'agent_configuration_queries',
        'agent_operations',
        'agent_status_queries',
        'network_interface_info',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def stop(agent_num: int = Path(..., alias='agentNum')):
    """
    Show the agent's primary IP address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/store/copy/{otherAgent}',
    description=""" This command copies the variable store from the other agent to this agent. """,
    tags=['agent_store_operations', 'agent_store_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def agent_store_copy(
    agent_num: int = Path(..., alias='agentNum'),
    other_agent: int = Path(..., alias='otherAgent'),
):
    """
    This command copies the variable store from the other agent to this agent.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/store/exists/{var}',
    description=""" It returns "1" if the variable exists, else "0". """,
    tags=['agent_store_operations', 'agent_store_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def agent_store_exists(agent_num: int = Path(..., alias='agentNum'), var: str = ...):
    """
    This command can be used as a predicate to ascertain the existence of a given variable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/store/get/{var}',
    description=""" The value will be returned as a string (like all Tcl values). """,
    tags=['agent_store_management', 'agent_store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def agent_store_get(agent_num: int = Path(..., alias='agentNum'), var: str = ...):
    """
    Fetches the value associated with a variable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/store/list',
    description=""" The list will be a Tcl format list with curly braces "{}" around each list element. These elements in turn are space separated. """,
    tags=['agent_store_management', 'agent_store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def agent_store_list(agent_num: int = Path(..., alias='agentNum')):
    """
    This command will return the list of variables in the said scope.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/store/lreplace/{var}/{index}',
    description=""" These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist. """,
    tags=['agent_store_management', 'store_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def agent_store_lreplace(
    agent_num: int = Path(..., alias='agentNum'),
    var: str = ...,
    index: int = ...,
    body: str = None,
):
    """
    These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/store/persists/{var}',
    description=""" It returns "1" if the variable is persistent, else "0". """,
    tags=['agent_store_management', 'agent_store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def agent_store_persists(agent_num: int = Path(..., alias='agentNum'), var: str = ...):
    """
    This command can be used as a predicate to ascertain the persistence of a given variable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/store/set/{var}/{persist}',
    description=""" The append sub-command will append the value to an existing variable, or create a new one. The set sub-command will overwrite an existing variable, or create a new one. The optional persist flag can be used to indicate if the variable is to be persistent as described above. By default a value of '0' will be implied for the persist flag. To avoid mistakes, for existing variables the persist flag can only be set. If you want to reset it, you first need to unset the variable. """,
    tags=['agent_store_management', 'agent_store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def agent_store_set(
    agent_num: int = Path(..., alias='agentNum'),
    var: str = ...,
    persist: int = ...,
    body: str = None,
):
    """
    These commands allow the creation of a new variable, or changing an existing value.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/store/unset/{var}',
    description=""" This will cleanup persistent variables if needed """,
    tags=['agent_store_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def agent_store_unset(agent_num: int = Path(..., alias='agentNum'), var: str = ...):
    """
    Deletes a variable which is currently defined.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/timer/script/add/{script}/{interval}/{arg}',
    description=""" Add a new timer script to be executed at specified interval (in msec) with the specified argument. """,
    tags=['timer_management', 'daemon_timer_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def add_timer_script(
    agent_num: int = Path(..., alias='agentNum'),
    script: str = ...,
    interval: int = ...,
    arg: str = ...,
):
    """
    Add a new timer script to be executed at specified interval (in msec) with the specified argument.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/timer/script/delete/{script}/{interval}/{arg}',
    description=""" The first scheduled script that matches the script name, and optionally the interval and argument will be deleted. """,
    tags=['agent_management', 'timer_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def del_timer_script(
    agent_num: int = Path(..., alias='agentNum'),
    script: str = ...,
    interval: int = ...,
    arg: str = ...,
):
    """
    Remove a timer script from the execution list.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/timer/script/list',
    description=""" The command mimic timer script list lists global timer scripts, the command /mimic/timer/script/{agentNum}/list is the per-agent equivalent NOTE Global timer scripts run globally but within them you can address individual agents using {agentNum}. To schedule timerscripts for an individual agent, use /mimic/timer/script/{agentNum}. """,
    tags=['timer_management', 'daemon_timer_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_timer_scripts(agent_num: int = Path(..., alias='agentNum')):
    """
    List the timer scripts currently running along with the their intervals.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/trap/config/add/{IP}/{port}',
    description=""" Add a trap destination to the set of destinations. """,
    tags=['trap_configuration', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def trap_config_add(
    agent_num: int = Path(..., alias='agentNum'),
    i_p: str = Path(..., alias='IP'),
    port: int = ...,
):
    """
    Add a trap destination to the set of destinations.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/trap/config/delete/{IP}/{port}',
    description=""" Remove a trap destination from the set of destinations. """,
    tags=['trap_configuration', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def trap_config_del(
    agent_num: int = Path(..., alias='agentNum'),
    i_p: str = Path(..., alias='IP'),
    port: int = ...,
):
    """
    Remove a trap destination from the set of destinations.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/trap/config/list',
    description=""" Each trap destination is identified with an IP address and a port number. The default port number is the standard SNMP trap port 162. """,
    tags=['trap_configuration', 'agent_management', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def trap_config_list(agent_num: int = Path(..., alias='agentNum')):
    """
    List the set of trap destinations for this agent instance.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/trap/list',
    description=""" List the outstanding asynchronous traps for this agent instance. """,
    tags=['agent_management', 'agent_status_queries', 'trap_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def trap_list(agent_num: int = Path(..., alias='agentNum')):
    """
    List the outstanding asynchronous traps for this agent instance.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/agent/{agentNum}/value/add/{object}/{instance}',
    description=""" The object needs to specify the MIB object with the INDEX clause, usually an object whose name ends with Entry. """,
    tags=['agent_management', 'agent_store_management', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def add(
    agent_num: int = Path(..., alias='agentNum'), object: str = ..., instance: str = ...
):
    """
    Add an entry to a table.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/eval/{object}/{instance}',
    description=""" Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests. """,
    tags=['snmp_operations', 'mib_object_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def eval_value(
    agent_num: int = Path(..., alias='agentNum'), object: str = ..., instance: str = ...
):
    """
    Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/get/{object}/{instance}/{variable}',
    description=""" Get a variable in the Value Space. """,
    tags=['agent_store_operations', 'agent_store_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_value(
    agent_num: int = Path(..., alias='agentNum'),
    object: str = ...,
    instance: str = ...,
    variable: str = ...,
):
    """
    Get a variable in the Value Space.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/info/{object}',
    description=""" Return the syntactical information for the specified object, such as type, size, range, enumerations, and ACCESS. """,
    tags=['agent_configuration_queries', 'agent_status_queries', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_info(agent_num: int = Path(..., alias='agentNum'), object: str = ...):
    """
    Return the syntactical information for the specified object, such as type, size, range, enumerations, and ACCESS.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/instances/{object}',
    description=""" This enables MIB browsing of the MIB on the current agent. """,
    tags=['mib_object_management', 'snmp_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_instances(agent_num: int = Path(..., alias='agentNum'), object: str = ...):
    """
    Display the MIB object instances for the specified object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/list/{OID}',
    description=""" This command is similar to the ls or dir operating system commands to list filesystem directories. """,
    tags=['mib_object_management', 'snmp_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_objects(
    agent_num: int = Path(..., alias='agentNum'), o_i_d: str = Path(..., alias='OID')
):
    """
    Display the MIB objects below the current position
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/meval/{objInsArray}',
    description=""" Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests. """,
    tags=['snmp_operations', 'mib_object_management', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def meval_value(
    agent_num: int = Path(..., alias='agentNum'),
    obj_ins_array: ObjInsArray = Path(..., alias='objInsArray'),
):
    """
    Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/mget/{objInsVarArray}',
    description=""" This is a performance optimization of the mimic value get command, to be used when many variables are requested. """,
    tags=['agent_store_management', 'agent_store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def mget_value(
    agent_num: int = Path(..., alias='agentNum'),
    obj_ins_var_array: ObjInsVarArray = Path(..., alias='objInsVarArray'),
):
    """
    Get multiple variables in the Value Space.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/mib/{object}',
    description=""" This will only return a MIB name if the object is unmistakeably defined in a MIB. """,
    tags=['mib_object_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_mib(agent_num: int = Path(..., alias='agentNum'), object: str = ...):
    """
    Return the MIB that defines the specified object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/value/mset',
    description=""" This is a performance optimization of the mimic value set command, to be used when many variables are to be set. """,
    tags=['agent_store_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def mset_value(
    agent_num: int = Path(..., alias='agentNum'),
    body: MimicAgentAgentNumValueMsetPutRequest = None,
):
    """
    Set multiple variables in the Value Space.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/value/munset',
    description=""" This is a performance optimization of the mimic value unset command, to be used when many variables are to be unset. """,
    tags=['agent_management', 'agent_store_management', 'agent_store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def munset_value(
    agent_num: int = Path(..., alias='agentNum'),
    body: MimicAgentAgentNumValueMunsetPutRequest = None,
):
    """
    Unset multiple variables in the Value Space
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/name/{OID}',
    description=""" Return the symbolic name of the specified object identifier. """,
    tags=['object_identifier_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_name(
    agent_num: int = Path(..., alias='agentNum'), o_i_d: str = Path(..., alias='OID')
):
    """
    Return the symbolic name of the specified object identifier.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/oid/{object}',
    description=""" Return the numeric OID of the specified object. """,
    tags=['object_identifier_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_oid(agent_num: int = Path(..., alias='agentNum'), object: str = ...):
    """
    Return the numeric OID of the specified object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/agent/{agentNum}/value/remove/{object}/{instance}',
    description=""" The object needs to specify the MIB object with the INDEX clause, usually an object whose name ends with Entry. """,
    tags=['agent_management', 'agent_store_management', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def remove(
    agent_num: int = Path(..., alias='agentNum'), object: str = ..., instance: str = ...
):
    """
    Remove an entry from a table.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/value/set/{object}/{instance}/{variable}',
    description=""" NOTE to set a binary string value, specify a string starting with \\x followed by pairs of hexadecimal digits, eg. "\\x 01 23 45". This command also assigns SNMP PDU action scripts for GET* and SET requests on a MIB object. The instance parameter must be 0. The following variables enable actions, g - The specified TCL script will be run on GET or GETNEXT requests. It has to exist under the simulation directory. s - The specified script will be run on SET requests. It has to exist under the simulation directory. This command also controls advanced trap generation functionality. The following variables control trap generation r, tu, c - These variables together represent the rate settings for the trap. r and tu is the actual per second rate and c represents the total duration in seconds for which the trap is sent. As soon as the c variable is set, the trap generation begins, for this reason it should be the last variable set for a particular trap. The following variables have to be set before setting the c variable to modify the behavior of the generated trap(s). OBJECT - An object name when used as a variable is looked up during the trap send and the value of that variable is included in the PDU. OBJECT.i - This type of variable will be used to assign an optional instance for the specified object in the traps varbind. The value of this variable identifies the index. e.g. The commands below will send ifIndex.2 with a value of 5 in the linkUp trap PDU. i - This variable is used to specify any extra version specific information to the trap generation code. Here is what it can be used to represent for various SNMP versions SNMPv1 - [community_string][,[enterprise][,agent_addr]] SNMPv2c - community_string SNMPv2 - source_party,destination_party,context SNMPv3 - user_name,context v - This variable lets the user override the version of the PDU being generated. The possible values are - "1", "2c", "2" and "3". o - This variable is used for traps that need extra variables to be added to the PDU along with the ones defined in the MIB as its variables. This lets the user force extra objects (along with instances if needed). All variables to be sent need to be assigned to the o variable. O - To omit any variables which are defined in the MIB you can use the O (capital o) variable. This needs to be set to the list of OIDs of the variable bindings in the order defined in the MIB. ip - The variable ip is used for generating the trap from the N-th IP alias address. a - This variable associates an action script to the trap or INFORM request. The action script specified in the value of this variable has to exist in the simulation directory. It will be executed before each instance of the trap is sent out. I - This optional variable controls the generation of INFORM PDUs. An INFORM is sent only if the variable is non-zero, else a TRAP is generated. R, T, E - This variable associates an action script to the INFORM request. The action script specified in the value of this variable has to exist in the simulation directory. The action script associated with the R variable will be executed on receiving a INFORM RESPONSE, the one associated with the T variable on a timeout (ie. no response), the one associated with the E variable on a report PDU. eid.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine id for the destination specified by IP-ADDRESS and optionally by PORT. eb.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine boots. et.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine time. """,
    tags=['agent_store_management', 'agent_store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_value(
    agent_num: int = Path(..., alias='agentNum'),
    object: str = ...,
    instance: str = ...,
    variable: str = ...,
    body: str = None,
):
    """
    Set a variable in the Value Space.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/split/{OID}',
    description=""" This is useful if you have an OID which is a combination of object and instance. """,
    tags=['object_identifier_management', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def split_oid(
    agent_num: int = Path(..., alias='agentNum'), o_i_d: str = Path(..., alias='OID')
):
    """
    Split the numerical OID into the object OID and instance OID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/state/get/{object}',
    description=""" To disable traversal into a MIB object and any subtree underneath, set the state to 0, else set the state to 1. """,
    tags=['mib_object_management', 'snmp_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_state(agent_num: int = Path(..., alias='agentNum'), object: str = ...):
    """
    Get the state of a MIB object object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/value/state/set/{object}/{state}',
    description=""" To disable traversal into a MIB object and any subtree underneath, set the state to 0, else set the state to 1. """,
    tags=['mib_object_management', 'agent_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_state(
    agent_num: int = Path(..., alias='agentNum'), object: str = ..., state: int = ...
):
    """
    Set the state of a MIB object object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/agent/{agentNum}/value/unset/{object}/{instance}/{variable}',
    description=""" Only variables that have previously been set can be unset. """,
    tags=['agent_store_management', 'agent_store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def unset_value(
    agent_num: int = Path(..., alias='agentNum'),
    object: str = ...,
    instance: str = ...,
    variable: str = ...,
):
    """
    Unset a variable in the Value Space in order to free its memory.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/agent/{agentNum}/value/variables/{object}/{instance}',
    description=""" This enables variable browsing of the MIB on the current agent. """,
    tags=['mib_object_management', 'agent_store_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_variables(
    agent_num: int = Path(..., alias='agentNum'), object: str = ..., instance: str = ...
):
    """
    Display the variables for the specified instance instance for the specified MIB object object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/clear/{firstAgentNum}/{lastAgentNum}',
    description=""" Clear the lab configuration. """,
    tags=['lab_configuration_handling', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def cfg_new(
    first_agent_num: int = Path(..., alias='firstAgentNum'),
    last_agent_num: int = Path(..., alias='lastAgentNum'),
):
    """
    Clear the lab configuration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/active_data_list',
    description=""" This list is guaranteed to be sorted into increasing order. """,
    tags=[
        'agent_management',
        'agent_operations',
        'agent_status_queries',
        'agent_configuration_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_active_data_list():
    """
    The list of {agentnum {statistics}} for agents that are currently active and whose statistics have changed since the last invocation of this command.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/active_list',
    description=""" This list is guaranteed to be sorted into increasing order. """,
    tags=['agent_status_queries', 'agent_management', 'agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_active_list():
    """
    The list of {agentnum} that are currently active (running or paused).
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/cfgfile',
    description=""" In the case of multi-user access this command returns a different configuration file loaded for each user. """,
    tags=['lab_configuration_handling', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_cfgfile():
    """
    The currently loaded lab configuration file for the particular user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/cfgfile_changed',
    description=""" Whether the loaded agent configuration file has changed since the last time this predicate was queried. This allows for a client to detect agent configuration changes and to synchronize those changes from the MIMIC daemon. """,
    tags=['agent_configuration_queries', 'agent_operations', 'agent_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_cfg_file_changed():
    """
    This predicate indicates if the currently loaded agent configuration file has changed.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/changed_config_list',
    description=""" This list contains at most 5000 agent(s), and is guaranteed to be sorted into increasing order. """,
    tags=['agent_configuration_queries', 'agent_configuration', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_changed_config_list():
    """
    The list of {agentnum} for which a configurable parameter changed.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/changed_state_list',
    description=""" This list contains at most 5000 agent(s), and is guaranteed to be sorted into increasing order. """,
    tags=['agent_management', 'agent_operations', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_changed_state_list():
    """
    The list of {agentnum state} for which the state changed.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/clients',
    description=""" The number of clients currently connected to the daemon. """,
    tags=['client_management', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_clients():
    """
    The number of clients currently connected to the daemon.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/configured_list',
    description=""" This list is guaranteed to be sorted into increasing order. """,
    tags=['agent_configuration_queries', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_configured_list():
    """
    The list of {agentnum} that are currently configured.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/interfaces',
    description=""" The set of network interfaces that can be used for simulations. """,
    tags=['network_interface_info', 'configuration_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_interfaces():
    """
    The set of network interfaces that can be used for simulations.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/last',
    description=""" The last configured agent instance. """,
    tags=[
        'agent_management',
        'agent_configuration_queries',
        'agent_operations',
        'agent_status_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_last():
    """
    The last configured agent instance.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/log',
    description=""" The current log file for the Simulator. """,
    tags=['agent_status_queries', 'log_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_log():
    """
    The current log file for the Simulator.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/max',
    description=""" The maximum number of agent instances. """,
    tags=['agent_management', 'agent_control', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_max():
    """
    The maximum number of agent instances.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/netaddr',
    description=""" The network address of the host where the MIMIC simulator is running. """,
    tags=['mimic_agent_control', 'network_interface_info'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_netaddr():
    """
    The network address of the host where the MIMIC simulator is running.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/netdev',
    description=""" The default network device to be used for agent addresses if the interface is not explicitly specified for an agent. """,
    tags=['agent_management', 'agent_configuration', 'agent_configuration_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_netdev():
    """
    The default network device to be used for agent addresses.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/product',
    description=""" The product number that is licensed. """,
    tags=['access_control_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_product():
    """
    The product number that is licensed.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/protocols',
    description=""" The set of protocols supported by the Simulator. """,
    tags=[
        'protocol_management',
        'command_interface_queries',
        'protocol_statistics_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_daemon_protocols():
    """
    The set of protocols supported by the Simulator.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/return',
    description=""" The OpenAPI daemon operates in two modes, nocatch, where error returns from MIMIC operations return error; or catch, where the TCL catch semantics are used (these are similar to C++ exceptions) """,
    tags=['agent_operations', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_return():
    """
    The return mode.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/get/version',
    description=""" The version of the MIMIC command interface. """,
    tags=['command_interface_queries', 'mimic_agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def get_version():
    """
    The version of the MIMIC command interface.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/load/{cfgFile}/{firstAgentNum}/{lastAgentNum}/{startAgentNum}',
    description=""" Load agents in cfgFile from firstAgentNum to lastAgentNum on startAgentNum of current configuration """,
    tags=['lab_configuration_handling', 'agent_management', 'agent_configuration'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def cfg_load(
    cfg_file: str = Path(..., alias='cfgFile'),
    first_agent_num: int = Path(..., alias='firstAgentNum'),
    last_agent_num: int = Path(..., alias='lastAgentNum'),
    start_agent_num: int = Path(..., alias='startAgentNum'),
):
    """
    Load the lab configuration file file.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/mget/{infoArray}',
    description=""" Get multiple sets of information about MIMIC, where infoArray is one of the parameters defined in the mimic get command. """,
    tags=['mimic_agent_control', 'agent_status_queries', 'command_interface_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def mget_info(info_array: InfoArray = Path(..., alias='infoArray')):
    """
    Get multiple sets of information about MIMIC, where infoArray is one of the parameters defined in the mimic get command.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/coap/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['protocol_coap_operations', 'protocol_statistics_headers'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_coap_get_stats_hdr():
    """
    Show the COAP statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/dhcp/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=[
        'protocol_dhcp_operations',
        'protocol_statistics_headers',
        'protocol_statistics_queries',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_dhcp_get_stats_hdr():
    """
    Show the DHCP statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/ipmi/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['ipmi_configuration_management', 'protocol_statistics_headers'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ipmi_get_stats_hdr():
    """
    Show the IPMI statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/mqtt/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['mqtt_client_operations', 'protocol_statistics_headers'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_mqtt_get_stats_hdr():
    """
    Show the MQTT statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/netflow/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['netflow_operations', 'protocol_statistics_headers'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_netflow_get_stats_hdr():
    """
    Show the NETFLOW statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/proxy/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['proxy_operations', 'protocol_statistics_headers'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_proxy_get_stats_hdr():
    """
    Show the PROXY statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/sflow/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['protocol_statistics_headers', 'sflow_configuration_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_sflow_get_stats_hdr():
    """
    Show the SFLOW statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/snmptcp/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['snmptcp_management', 'protocol_statistics_headers'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_snmptcp_get_stats_hdr():
    """
    Show the SNMPTCP statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/ssh/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['protocol_statistics_headers'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_ssh_get_stats_hdr():
    """
    Show the SSH statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/syslog/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['syslog_management', 'protocol_statistics_headers'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_syslog_get_stats_hdr():
    """
    Show the SYSLOG statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/telnet/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['protocol_statistics_headers', 'telnet_configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_telnet_get_stats_hdr():
    """
    Show the TELNET statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/tftp/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['tftp_operations', 'protocol_statistics_headers'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tftp_get_stats_hdr():
    """
    Show the TFTP statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/tod/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['tod_operations', 'protocol_statistics_headers'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_tod_get_stats_hdr():
    """
    Show the TOD statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/protocol/msg/web/get/stats_hdr',
    description=""" The headers of statistics fields """,
    tags=['protocol_statistics_headers', 'protocol_statistics_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def protocol_web_get_stats_hdr():
    """
    Show the WEB statistics headers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/save',
    description=""" Save the lab configuration. """,
    tags=['lab_configuration_handling', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def cfg_save():
    """
    Save the lab configuration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/saveas/{cfgFile}/{firstAgentNum}/{lastAgentNum}',
    description=""" Save the lab configuration in file. """,
    tags=['lab_configuration_handling', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def cfg_saveas(
    cfg_file: str = Path(..., alias='cfgFile'),
    first_agent_num: int = Path(..., alias='firstAgentNum'),
    last_agent_num: int = Path(..., alias='lastAgentNum'),
):
    """
    Save the lab configuration in file.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/set/log',
    description=""" The current log file for the Simulator. """,
    tags=['mimic_agent_control', 'agent_operations', 'agent_status_queries'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_log(body: str):
    """
    The current log file for the Simulator.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/set/netdev',
    description=""" The network address of the host where the MIMIC simulator is running. """,
    tags=['network_interface_info', 'mimic_agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def set_netdev():
    """
    The network address of the host where the MIMIC simulator is running.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/set/persistent',
    description=""" The MIMIC daemon caches persistent objects and their changes, and writes them to disk at program termination. If it were to crash, these changes would be lost. This operation allows to checkpoint the cache, ie. write changes to persistent objects to disk. To save the lab configuration with per-agent persistent information the mimic save operation needs to be used. """,
    tags=['store_operations', 'configuration_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def store_save():
    """
    This operation flushes all global objects which need to be made persistent to disk.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/start',
    description=""" Start MIMIC. """,
    tags=['agent_management', 'agent_control', 'mimic_agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def start_all_agents():
    """
    Start MIMIC.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/stop',
    description=""" Stop MIMIC. """,
    tags=['agent_management', 'agent_control', 'mimic_agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def stop_all_agents():
    """
    Stop MIMIC.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/store/exists/{var}',
    description=""" It returns "1" if the variable exists, else "0". """,
    tags=['agent_store_operations', 'agent_store_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def store_exists(var: str):
    """
    This command can be used as a predicate to ascertain the existence of a given variable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/store/get/{var}',
    description=""" The value will be returned as a string (like all Tcl values). """,
    tags=['agent_store_management', 'store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def store_get(var: str):
    """
    Fetches the value associated with a variable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/store/list',
    description=""" The list will be a Tcl format list with curly braces "{}" around each list element. These elements in turn are space separated. """,
    tags=['agent_store_management', 'store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def store_list():
    """
    This command will return the list of variables in the said scope.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/store/lreplace/{var}/{index}',
    description=""" These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist. """,
    tags=['agent_store_management', 'store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def store_lreplace(var: str, index: int = ..., body: str = None):
    """
    These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/store/persists/{var}',
    description=""" It returns "1" if the variable is persistent, else "0". """,
    tags=['store_operations', 'agent_store_operations', 'agent_store_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def store_persists(var: str):
    """
    This command can be used as a predicate to ascertain the persistence of a given variable.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/store/set/{var}/{persist}',
    description=""" Persist 1 means persistent , 0 means non-persistent """,
    tags=['agent_store_management', 'store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def store_set(var: str, persist: int = ..., body: str = None):
    """
    Set the variable store for the global storage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/store/unset/{var}',
    description=""" This will cleanup persistent variables if needed """,
    tags=['agent_store_management', 'store_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def store_unset(var: str):
    """
    Deletes a variable which is currently defined.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/mimic/terminate',
    description=""" Terminate the MIMIC daemon. """,
    tags=['agent_management', 'agent_control', 'mimic_agent_control'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def terminate():
    """
    Terminate the MIMIC daemon.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mimic/timer/script/add/{script}/{interval}/{arg}',
    description=""" Add a new timer script to be executed at specified interval (in msec) with the specified argument. """,
    tags=['timer_management', 'daemon_timer_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def add_daemon_timer_script(script: str, interval: int = ..., arg: str = ...):
    """
    Add a new timer script to be executed at specified interval (in msec) with the specified argument.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/mimic/timer/script/delete/{script}/{interval}/{arg}',
    description=""" The first scheduled script that matches the script name, and optionally the interval and argument will be deleted. """,
    tags=['timer_management', 'daemon_timer_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def del_daemon_timer_script(script: str, interval: int = ..., arg: str = ...):
    """
    Remove a timer script from the execution list.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/mimic/timer/script/list',
    description=""" The command mimic timer script list lists global timer scripts, the command /mimic/timer/script/{agentNum}/list is the per-agent equivalent NOTE Global timer scripts run globally but within them you can address individual agents using {agentNum}. To schedule timerscripts for an individual agent, use /mimic/timer/script/{agentNum}. """,
    tags=['timer_management', 'daemon_timer_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_daemon_timer_scripts():
    """
    List the timer scripts currently running along with the their intervals.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
